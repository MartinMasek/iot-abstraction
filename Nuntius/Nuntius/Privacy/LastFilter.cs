using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Nuntius.Privacy
{
    /// <summary>
    /// This filter sends only the last message from a given time interval.
    /// </summary>
    public class LastFilter : EventSourceBase, IEventPropagator
    {
        private readonly int _intervalInMs;
        private NuntiusMessage _lastMessage;
        private Task _taskWhichSendsMessage;
        private object _lock = new object();

        /// <summary>
        /// Constructs a new instance which does not check task exceptions.
        /// </summary>
        /// <param name="intervalInMs">Interval in milliseconds. After receiving the first message, a timer is started
        /// and only a last message from the interval given by this parameter is sent.</param>
        public LastFilter(int intervalInMs) : this(intervalInMs, EventSourceCallbackMonitoringOptions.NotCheckTaskException)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intervalInMs">Interval in milliseconds. After receiving the first message, a timer is started
        /// and only a last message from the interval given by this parameter is sent.</param>
        /// <param name="options">Configuration regarding checking of tasks returned by 
        /// <see cref="EventSourceBase.Send"/> event.</param>
        public LastFilter(int intervalInMs, EventSourceCallbackMonitoringOptions options) : base(options)
        {
            _intervalInMs = intervalInMs;
        }

        /// <summary>
        /// Returns a task which represents message processing by the event target.
        /// </summary>
        /// <param name="message">Message to process.</param>
        /// <returns>Task which represents message processing.</returns>
        public Task ProcessMessage(NuntiusMessage message)
        {
            return Task.Factory.StartNew(() =>
            {
                lock (_lock)
                {
                    _lastMessage = message;
                    if (_taskWhichSendsMessage == null)
                    {
                        _taskWhichSendsMessage = Task.Factory.StartNew(async () =>
                        {
                            await Task.Delay(_intervalInMs);
                            lock (_lock)
                            {
                                // Save pointer because send is async so the receiver could get null.
                                var msg = _lastMessage;   
                                SafelyInvokeSendEvent(msg);
                                _lastMessage = null;
                                _taskWhichSendsMessage = null;
                            }
                        });
                    }
                }
            });
        }

        /// <summary>
        /// Callback which is called when no more messages are generated by the event source.
        /// </summary>
        public void EndProcessing()
        {
            SafelyInvokeEndEvent();
        }
    }
}
