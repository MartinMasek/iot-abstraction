using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nuntius.Privacy
{
    /// <summary>
    /// Trims a message that is it removes properties which are passed as parameters.
    /// </summary>
    public class TrimMessageFilter : EventSourceBase, IEventPropagator
    {
        private readonly string[] _keysToDelete;
        private readonly bool _checkKeyPressenceInMessage;

        /// <summary>
        /// Creates a new trim message filter which does not check for exceptions in tasks returned by 
        /// <see cref="EventSourceBase.Send"/> callbacks and does not check whether message contains all
        /// keys which should be deleted.
        /// </summary>
        /// <param name="keysToDelete">Keys to delete from the message.</param>
        public TrimMessageFilter(params string[] keysToDelete) : this(false, keysToDelete)
        {
        }

        /// <summary>
        /// Creates a new trim message filter which does not check for exceptions in tasks returned by 
        /// <see cref="EventSourceBase.Send"/> callbacks.
        /// </summary>
        /// <param name="checkKeyPressenceInMessage">If set to true throws <see cref="KeyNotFoundException"/> when deleted key
        /// is not in the message.</param>
        /// <param name="keysToDelete">Keys to delete from the message.</param>
        public TrimMessageFilter(bool checkKeyPressenceInMessage, params string[] keysToDelete)
            : this(checkKeyPressenceInMessage, EventSourceCallbackMonitoringOptions.NotCheckTaskException, keysToDelete)
        {
        }

        /// <summary>
        /// Creates a new trim message filter.
        /// </summary>
        /// <param name="checkKeyPressenceInMessage">If set to true throws <see cref="KeyNotFoundException"/> when deleted key
        /// is not in the message.</param>
        /// <param name="monitoringOption">How to behave when invoking <see cref="EventSourceBase.Send"/> callbacks.</param>
        /// <param name="keysToDelete">Keys to delete from the message.</param>
        public TrimMessageFilter(bool checkKeyPressenceInMessage, EventSourceCallbackMonitoringOptions monitoringOption, params string[] keysToDelete)
            : base(monitoringOption)
        {
            _checkKeyPressenceInMessage = checkKeyPressenceInMessage;
            _keysToDelete = keysToDelete;
        }

        /// <summary>
        /// Returns a task which represents message processing by the event target.
        /// </summary>
        /// <param name="message">Message to process.</param>
        /// <returns>Task which represents message processing.</returns>
        public Task ProcessMessage(NuntiusMessage message)
        {
            return Task.Factory.StartNew(() =>
            {
                foreach (var key in _keysToDelete)
                {
                    if (!message.RemoveProperty(key) && _checkKeyPressenceInMessage)
                        throw new KeyNotFoundException($"Key {key} was not found in the message: {message}.");
                }
                SafelyInvokeSendEvent(message);
            });
        }

        /// <summary>
        /// Callback which is called when no more messages are generated by the event source.
        /// </summary>
        public void EndProcessing()
        {
            SafelyInvokeEndEvent();
        }
    }
}
