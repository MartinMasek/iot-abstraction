using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nuntius.Logging
{
    /// <summary>
    /// A class logging incoming messages to a file.
    /// </summary>
    public class FileLogger : EventSourceBase, ILogger, IDisposable, IEventPropagator
    {
        private readonly Func<NuntiusMessage, string> _messageToString;
        private readonly StreamWriter _writer;

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        /// <param name="filePath">Path of file to which the incoming messages should be outputted. If the file
        /// does not exist, it is created.</param>
        public FileLogger(string filePath) : this(filePath, false)
        {
        }

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        /// <param name="filePath">Path of file to which the incoming messages should be outputted. If the file
        /// does not exist, it is created.</param>
        /// <param name="append">True if the new content should be appended.</param>
        public FileLogger(string filePath, bool append)
        {
            if (filePath == null) throw new ArgumentNullException($"{nameof(filePath)} must not be null.");
            if (!Directory.Exists(Path.GetDirectoryName(filePath)))
                Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            _writer = new StreamWriter(filePath, append);
            _messageToString = message =>
                    $"{DateTime.Now.ToString("HH:mm:ss.f")}{Environment.NewLine}Message: {message}{Environment.NewLine}";
        }

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        /// <param name="filePath">Path of file to which the incoming messages should be outputted. If the file
        /// does not exist, it is created.</param>
        /// <param name="append">True if the new content should be appended.</param>
        /// <param name="messageToString">Function converting a message to a string which is then logged.</param>
        public FileLogger(string filePath, bool append, Func<NuntiusMessage, string> messageToString) : this(filePath, append)
        {
            _messageToString = messageToString;
        }

        public void Log(NuntiusMessage message)
        {
            _writer.WriteLine(_messageToString(message));
        }

        /// <summary>
        /// Method called when no more logging should be done.
        /// </summary>
        public void EndLogging()
        {
            EndProcessing();
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            _writer.Dispose();
        }

        /// <summary>
        /// Returns a task which represents message processing by the event target.
        /// </summary>
        /// <param name="message">Message to process.</param>
        /// <returns>Task which represents message processing.</returns>
        public Task ProcessMessage(NuntiusMessage message)
        {
            Log(message);
            return Task.Factory.StartNew(() =>
            {
                SafelyInvokeSendEvent(message);
            });
        }

        /// <summary>
        /// Callback which is called when no more messages are generated by the event source.
        /// </summary>
        public void EndProcessing()
        {
            _writer.Dispose();
            SafelyInvokeEndEvent();
        }
    }
}
